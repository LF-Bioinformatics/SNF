package a_snf_1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Tools {
    
    /** User Property Keys **/
    
    //Runs
    public static String USER_CONFIG = "USER_CONFIG";
    public static String RUN_DIR = "RUN_DIR";
    public static String RUN_SCRIPTS_DIR = "RUN_SCRIPTS_DIR";
    public static String RUN_LOGS_DIR = "LOGS_DIR";
    public static final String FASTQ_DIR = "FASTQ_DIR";
    public static final String PROCESSED_FASTA_DIR = "PROCESSED_FASTA_DIR";
    public static final String RESULTS_DIR = "RESULTS_DIR";
    public static final String FASTQC_DIR = "FASTQC_DIR";
    public static final String TABLES_DIR = "TABLES";
    public static final String IRS_DIR = "IRS";
    public static final String IRS_FILE = "IRS_FILE";
    public static final String ALIGN_DIR = "ALIGN";
    public static final String RATIO = "RATIO";
    public static final String BLAST_DIR = "BLAST_DIR";
    public static final String BLAST_DB = "BLAST_DB";
    public static final String BLAST_RESULT = "BLAST_RESULT";
    
    
    /** GRF Property Keys **/
    public static final String PATMAN = "PATMAN";
    public static final String GRF_T = "GRF_T";
    public static final String GRF_MIN_TR = "GRF_MIN_TR";
    public static final String GRF_P = "GRF_P";
    public static final String GRF_MAX_SPACE = "GRF_MAX_SPACE";
    public static final String GRF_MAX_TR = "GRF_MAX_TR";
    public static final String GRF_MIN_SPACE = "GRF_MIN_SPACE";
    public static final String GRF_R = "GRF_R";
    
    /** Default Property Keys **/
    public static final String INSTALL_CONDA = "INSTALL_CONDA";
    public static final String INSTALL_CONDA_TOOLS = "INSTALL_CONDA_TOOLS";
    public static final String INSTALL_PATMAN = "INSTALL_PATMAN";
    public static final String MINICONDAURL_LINUX = "MINICONDAURL_LINUX";
    public static final String PATMAN_URL = "PATMAN_URL";
    public static final String INSTALL_SCRIPTS_DIR = "INSTALL_SCRIPTS_DIR";
    //Installation
    public static String INSTALL_DIR ="INSTALL_DIR";
    public static String DEPEND_DIR = "DEPEND_DIR";
    public static String CONDA_DIR = "CONDA_DIR"; 
    public static String CONDA_BIN = "CONDA_BIN"; 
    public static final String INSTALL_SCRIPTS = "INSTALL_SCRIPTS";
    public static String INSTALL_LOG = "INSTALL_LOG";
    
    /** Default properties File. **/
    private File defaultPropsFile;
    /** Contents of default properties file. Mandatory location. **/ 
    private Properties defaultProps;
    /** Contents of user properties file. Auto generated by application. **/
    private Properties userProps;
    
    public Tools(String defaultPropsFilePath){
        if(this.isDefaultConfigFilePresent(defaultPropsFilePath)){
            this.defaultPropsFile = new File(defaultPropsFilePath);
            this.defaultProps = new Properties();
            this.userProps = new Properties();
            try (FileInputStream in = new FileInputStream(this.defaultPropsFile.getAbsolutePath())) {
                System.out.println("Loading default properties.config.");
                defaultProps.load(in);
                defaultProps.list(System.out);
            } catch (IOException ex) {
                Logger.getLogger(Tools.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }
    
    private String getInstallDir(){
        return new File(this.defaultProps.getProperty(Tools.INSTALL_DIR)).getAbsolutePath();
    }
    
    public void installCondaEnvironmentAsRequired(){
        if(this.isCondaInstallRequestedByUser()){
            this.userProps.setProperty(Tools.DEPEND_DIR, this.getInstallDir());
            this.userProps.setProperty(Tools.CONDA_DIR, this.userProps.getProperty(Tools.DEPEND_DIR)+"/miniconda");
            this.userProps.setProperty(Tools.CONDA_BIN, this.userProps.getProperty(Tools.CONDA_DIR)+"/bin/conda");
            this.userProps.setProperty(Tools.INSTALL_LOG, this.userProps.getProperty(Tools.DEPEND_DIR)+"/install.log.txt");
            this.userProps.setProperty(Tools.INSTALL_SCRIPTS_DIR, this.userProps.getProperty(Tools.DEPEND_DIR)+"/install_scripts");
            File dependDir = new File(this.userProps.getProperty(Tools.DEPEND_DIR));
            dependDir.mkdirs();
            File installScriptsDir = new File(this.userProps.getProperty(Tools.INSTALL_SCRIPTS_DIR));
            installScriptsDir.mkdirs();
            FileUtils f = new FileUtils();
            String cmd = "";
            cmd += "cd " + this.userProps.getProperty(Tools.INSTALL_SCRIPTS_DIR) + Tools.nl()
                    + f.getOSGetCommand() + " " + this.defaultProps.getProperty(Tools.MINICONDAURL_LINUX) + Tools.nl() 
                    + "chmod 777 " + new File(this.defaultProps.getProperty(Tools.MINICONDAURL_LINUX)).getName() + Tools.nl() 
                    + "./" + new File(this.defaultProps.getProperty(Tools.MINICONDAURL_LINUX)).getName() + " -b -p " + this.userProps.getProperty(Tools.CONDA_DIR) 
                    + " >> " + this.userProps.getProperty(Tools.INSTALL_LOG) + Tools.nl()
                    + this.userProps.getProperty(Tools.CONDA_BIN) + " update conda -q -y " 
                    + " >> " + this.userProps.getProperty(Tools.INSTALL_LOG) + Tools.nl();          
            cmd += "source " + this.userProps.getProperty(Tools.CONDA_DIR) + "/bin/activate "+Tools.nl() 
                    + this.userProps.getProperty(Tools.CONDA_BIN) + " init bash "+Tools.nl()
                    + "conda create --name snfenv -q -y "+Tools.nl();
            f.command(cmd, new File(this.userProps.getProperty(Tools.INSTALL_SCRIPTS_DIR)),"I_01", false);
            StringBuilder testEnv = this.getCommandBuilder().append("conda info --envs").append(Tools.nl()); 
            f.command(testEnv.toString(), new File(this.userProps.getProperty(Tools.INSTALL_SCRIPTS_DIR)),"I_02", false); 
        }
    }
    
    public void installCondaTools() {
        if(this.isCondaToolsInstallRequestedByUser()){
            FileUtils f = new FileUtils();
            StringBuilder cmd = this.getCommandBuilder()
                    //fastqc
                    .append("conda").append(" install -q -y -c bioconda fastqc").append(Tools.nl())
                    .append("fastqc -v").append(Tools.nl())
                    //grf
                    .append("conda").append(" install -q -y -c bioconda genericrepeatfinder").append(Tools.nl())
                    .append("grf-main").append(Tools.nl())
                    //trim-galore!
                    .append("conda").append(" install -q -y -c bioconda trim-galore").append(Tools.nl())
                    .append("trim_galore -v").append(Tools.nl())
                    //seqkit
                    .append("conda").append(" install -q -y -c bioconda seqkit").append(Tools.nl())
                    //bedtools
                    .append("conda").append(" install -q -y -c bioconda bedtools").append(Tools.nl())
                    //blast
                    .append("conda").append(" install -q -y -c bioconda blast").append(Tools.nl());
            f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.INSTALL_SCRIPTS_DIR)),"I_03", false);
        }  
    }
    
    public void installPatmanAsRequested(){
        if(this.isPatmanInstallationRequestedByUser()){
            System.out.println("Download and install patman.");
            FileUtils f = new FileUtils();
            StringBuilder cmd = this.getCommandBuilder()
                .append("cd ").append(this.userProps.getProperty(Tools.INSTALL_SCRIPTS_DIR)).append(Tools.nl())
                .append(f.getOSGetCommand()).append(" ").append(this.defaultProps.getProperty(Tools.PATMAN_URL)).append(Tools.nl())
                .append("tar -vxzf patman-1.2.2.tar.gz \n")
                .append(this.userProps.getProperty(Tools.INSTALL_SCRIPTS_DIR)).append("/patman-1.2.2/patman -V").append(Tools.nl());
            f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.INSTALL_SCRIPTS_DIR)),"I_04", false); 
            this.userProps.setProperty(Tools.PATMAN, this.userProps.getProperty(Tools.INSTALL_SCRIPTS_DIR)+"/patman-1.2.2/patman");
            this.defaultProps.setProperty(Tools.PATMAN, this.userProps.getProperty(Tools.INSTALL_SCRIPTS_DIR)+"/patman-1.2.2/patman");
            
        } else {
            if(this.defaultProps.getProperty(Tools.PATMAN).isEmpty()){
                System.err.println("Error: Patman not requested to be installed and alternative path not provided.");
                System.err.println("Please install patman and provide its path in 'properties.config'.");
                System.exit(1);
            } else{
                this.userProps.setProperty(Tools.PATMAN, this.defaultProps.getProperty(Tools.PATMAN));
            }
        }  
    }
    
    public void installComplete(){
        this.defaultProps.setProperty(Tools.INSTALL_CONDA, "false");
        this.defaultProps.setProperty(Tools.INSTALL_CONDA_TOOLS, "false");
        this.defaultProps.setProperty(Tools.INSTALL_PATMAN, "false");
        try (FileOutputStream out = new FileOutputStream(this.defaultPropsFile.getAbsolutePath())) {
            defaultProps.store(out, "---DEFAULT CONFIGURATION INITIAL INSTALL DONE---");
        } catch (IOException ex) {
            Logger.getLogger(Tools.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void setUpRunDir(String outputDir){
        System.out.println("Setting up run directory.");
        FileUtils f = new FileUtils();
        this.userProps.setProperty(Tools.RUN_DIR, outputDir);
        this.userProps.setProperty(Tools.RUN_SCRIPTS_DIR, this.userProps.getProperty(Tools.RUN_DIR)+"/scripts");
        this.userProps.setProperty(Tools.RUN_LOGS_DIR, this.userProps.getProperty(Tools.RUN_DIR)+"/logs");
        this.userProps.setProperty(Tools.USER_CONFIG, this.userProps.getProperty(Tools.RUN_DIR)+"/user.config");
        this.userProps.setProperty(Tools.FASTQ_DIR, this.userProps.getProperty(Tools.RUN_DIR)+"/fastq");
        this.userProps.setProperty(Tools.PROCESSED_FASTA_DIR, this.userProps.getProperty(Tools.RUN_DIR)+"/processed_reads");
        this.userProps.setProperty(Tools.RESULTS_DIR, this.userProps.getProperty(Tools.RUN_DIR)+"/results");
        this.userProps.setProperty(Tools.FASTQC_DIR, this.userProps.getProperty(Tools.RUN_DIR)+"/results/fastqc");
        this.userProps.setProperty(Tools.TABLES_DIR, this.userProps.getProperty(Tools.RUN_DIR)+"/results/tables");
        this.userProps.setProperty(Tools.IRS_DIR, this.userProps.getProperty(Tools.RUN_DIR)+"/results/IRs");
        this.userProps.setProperty(Tools.ALIGN_DIR, this.userProps.getProperty(Tools.RUN_DIR)+"/results/align");
        this.userProps.setProperty(Tools.BLAST_DIR, this.userProps.getProperty(Tools.RUN_DIR)+"/results/blast");
        
        File runDir = new File(this.userProps.getProperty(Tools.RUN_DIR));
        runDir.mkdirs();
        File scriptsDir = new File(this.userProps.getProperty(Tools.RUN_SCRIPTS_DIR));
        scriptsDir.mkdirs();
        
        StringBuilder cmd = this.getCommandBuilder()
            .append("mkdir ").append(this.userProps.getProperty(Tools.RUN_LOGS_DIR)).append(Tools.nl())
            .append("mkdir ").append(this.userProps.getProperty(Tools.FASTQ_DIR)).append(Tools.nl())
            .append("mkdir ").append(this.userProps.getProperty(Tools.PROCESSED_FASTA_DIR)).append(Tools.nl())
            .append("mkdir ").append(this.userProps.getProperty(Tools.RESULTS_DIR)).append(Tools.nl())
            .append("mkdir ").append(this.userProps.getProperty(Tools.FASTQC_DIR)).append(Tools.nl())
            .append("mkdir ").append(this.userProps.getProperty(Tools.TABLES_DIR)).append(Tools.nl())
            .append("mkdir ").append(this.userProps.getProperty(Tools.IRS_DIR)).append(Tools.nl())
            .append("mkdir ").append(this.userProps.getProperty(Tools.ALIGN_DIR)).append(Tools.nl())
            .append("mkdir ").append(this.userProps.getProperty(Tools.BLAST_DIR)).append(Tools.nl());
        f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.RUN_SCRIPTS_DIR)),"01.0", false);
        try (FileOutputStream out = new FileOutputStream(this.userProps.getProperty(Tools.USER_CONFIG))) {
            userProps.store(out, "---USER CONFIGURATION ANALYSIS---");
        } catch (IOException ex) {
            Logger.getLogger(Tools.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    
    public File runGRF(File genomeFasta){
        System.out.println("Running grf-main.");
        FileUtils f = new FileUtils();
        StringBuilder cmd = this.getCommandBuilder()
                .append("cd ").append(this.userProps.getProperty(Tools.IRS_DIR)).append(Tools.nl())
                .append("grf-main -i ").append(genomeFasta.getAbsolutePath())
                .append(" -o . -c 0 -t ").append(this.defaultProps.getProperty(Tools.GRF_T))
                .append(" -r ").append(this.defaultProps.getProperty(Tools.GRF_R))
                .append(" -p ").append(this.defaultProps.getProperty(Tools.GRF_P))
                .append(" --min_tr ").append(this.defaultProps.getProperty(Tools.GRF_MIN_TR))
                .append(" --max_space ").append(this.defaultProps.getProperty(Tools.GRF_MAX_SPACE))
                .append(" --max_tr ").append(this.defaultProps.getProperty(Tools.GRF_MAX_TR))
                .append(" --min_space ").append(this.defaultProps.getProperty(Tools.GRF_MIN_SPACE))
                .append(Tools.nl())
                .append("cat perfect.fasta perfect.spacer.fasta imperfect.fasta > IRs.fa").append(Tools.nl()); 
        f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.RUN_SCRIPTS_DIR)),"02.0", false);
        File irs = new File(this.userProps.getProperty(Tools.IRS_DIR)+"/IRs.fa");
        this.userProps.setProperty(Tools.IRS_FILE, irs.getAbsolutePath());
        System.out.println("Running grf-main. done.");
        return irs;   
    }
    
    public void runFastQCPre(String runID, String arg) {
        System.out.println("Running FASTQC.");
        FileUtils f = new FileUtils();
        if(arg.contains(",")){
            String[] fastqs = arg.split(",");
            for (String fastq : fastqs) {
                StringBuilder cmd = this.getCommandBuilder()
                    .append("fastqc ").append(new File(fastq).getAbsolutePath()).append(" --outdir=").append(this.userProps.getProperty(Tools.FASTQC_DIR)).append(Tools.nl());
                f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.RUN_SCRIPTS_DIR)),"03.0",false);
            }
        }else{
            StringBuilder cmd = this.getCommandBuilder()
                .append("fastqc ").append(new File(arg).getAbsolutePath()).append(" --outdir=").append(this.userProps.getProperty(Tools.FASTQC_DIR)).append(Tools.nl());
            f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.RUN_SCRIPTS_DIR)), "03.1", false);
        }
        System.out.println("Running FASTQC. done.");
    }
         
    public File runFastqsToSingleUncompressedFastq(String arg) {
        System.out.println("Running Fastqs To Single Uncompressed Fastq.");
        FileUtils f = new FileUtils();
        StringBuilder cmd = this.getCommandBuilder();
        File fastqFile;
        
        if(arg.contains(",")) {
            String catOutFileName = "";
            String cat = "cat ";
            String[] fastqs = arg.split(",");
            for (String fastq : fastqs) {
                File fq = new File(fastq);
                if(fq.getName().endsWith(".gz")){
                    cmd.append("gunzip ").append(fq.getAbsolutePath()).append(Tools.nl());
                    cat += fq.getAbsolutePath().substring(0, fq.getAbsolutePath().lastIndexOf(".")) + " ";
                    catOutFileName += fq.getName().substring(0, fq.getName().lastIndexOf(".")) + "_";
                } else {
                    cat += fq.getAbsolutePath() + " ";
                    catOutFileName += fq.getName() + "_";
                }
            }
            fastqFile = new File(this.userProps.getProperty(Tools.FASTQ_DIR)+"/"+catOutFileName.substring(0,catOutFileName.length()-1));
            cmd.append(cat).append("> ").append(fastqFile.getAbsolutePath()).append(Tools.nl());
            f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.RUN_SCRIPTS_DIR)), "04.0", false);
        } else {
            if(arg.contains(".gz")){
                cmd.append("gunzip ").append(arg).append(Tools.nl());
                f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.RUN_SCRIPTS_DIR)), "04.1", false);
                fastqFile = new File(arg.substring(0, arg.lastIndexOf(".")));
            } else {
                fastqFile = new File(arg);
                System.out.println("Nothing to do. skip.");
            }
        }
        System.out.println("Running fastqsToSingleUncompressedFastq. done.");
        return fastqFile;
    }
    
    public File runTrimAdapters(File fastq, boolean HD, String adapter){
        System.out.println("Running trimAdapters.");
        FileUtils f = new FileUtils();
        StringBuilder cmd = this.getCommandBuilder().append("cd ").append(this.userProps.getProperty(Tools.FASTQ_DIR)).append(Tools.nl())
            .append("trim_galore ").append("--stringency ").append("8 ").append("--dont_gzip ")
            .append("--output_dir ").append(this.userProps.getProperty(Tools.FASTQ_DIR)).append(" --length 18 --max_n 0 ");
            if(HD == true) {
                cmd.append("--clip_R1 4 ").append("--three_prime_clip_R1 4 ");
            }
            if(adapter != null && adapter.length() >= 9) {
                cmd.append("--adapter ").append(adapter);
            }
            cmd.append(fastq.getAbsolutePath()).append(" >> adapter_trimming.log.txt").append(Tools.nl());
        f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.RUN_SCRIPTS_DIR)), "05.0", false);
        String fileName = fastq.getName().substring(0, fastq.getName().lastIndexOf("."));
        System.out.println("Trimmed File Name: "+fileName);
        String filePath = this.userProps.getProperty(Tools.FASTQ_DIR)+"/"+fileName+"_trimmed.fq";
        File trimmedFastq = new File(filePath);
        System.out.println("Trimmed File: "+trimmedFastq.getAbsolutePath());
        System.out.println("Running trimAdapters. done.");
        return trimmedFastq;
    }

    public File runFastqToFasta(File fastq){
        System.out.println("Running fastqToFasta.");
        FileUtils f = new FileUtils();
        File outFasta = new File(this.userProps.getProperty(Tools.PROCESSED_FASTA_DIR)+"/"+fastq.getName()+".fasta");
        StringBuilder cmd = this.getCommandBuilder().append("seqkit fq2fa ").append(fastq.getAbsolutePath())
                .append(" -o ").append(outFasta.getAbsolutePath());
        f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.RUN_SCRIPTS_DIR)), "06.0", false);
        System.out.println("Running fastqToFasta. done.");
        return outFasta; 
    }
    
    public File runPatman(File patterns, File database){
        System.out.println("Running patman.");
        FileUtils f = new FileUtils();
        StringBuilder cmd = this.getCommandBuilder()
                .append("cd ").append(this.userProps.getProperty(Tools.ALIGN_DIR)).append(" \n")
                .append(this.userProps.getProperty(Tools.PATMAN)).append(" -e 0 -g 0 -D ").append(database.getAbsolutePath()).append(" -P ").append(patterns.getAbsolutePath())
                .append(" -o ").append(patterns.getName()).append(".patman.aln \n");
        f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.RUN_SCRIPTS_DIR)),"07.0", false);
        File align = new File(this.userProps.getProperty(Tools.ALIGN_DIR)+"/"+patterns.getName()+".patman.aln");
        System.out.println("Running patman. done.");
        return align;           
    }

    public void runBuildBlastGeneDatabase(File genesFasta) {
        System.out.println("Building blastn database.");
        String blastDB = this.userProps.getProperty(Tools.RUN_DIR)+"/blastDB";
        File readyGenes;
        StringBuilder cmd = this.getCommandBuilder();
        cmd.append("mkdir ").append(blastDB).append(Tools.nl());
        cmd.append("cd ").append(blastDB).append(Tools.nl());
        cmd.append("cp ").append(genesFasta.getAbsolutePath()).append(" .").append(Tools.nl());
        readyGenes = new File(blastDB+"/"+genesFasta.getName());
        if(this.isGziped(readyGenes)){
            cmd.append("gunzip ").append(readyGenes.getAbsolutePath()).append(Tools.nl());
            String unzipped = readyGenes.getAbsolutePath().replace(".gz", "");
            readyGenes = new File(unzipped+".fsa");
            cmd.append("mv ").append(unzipped).append(" ").append(readyGenes.getAbsolutePath()).append(Tools.nl()); 
        }else{
            readyGenes = new File(readyGenes.getAbsolutePath()+".fsa");
            cmd.append("mv ").append(genesFasta.getAbsolutePath()).append(" ").append(readyGenes.getAbsolutePath()).append(Tools.nl());
        }
        cmd.append("makeblastdb -in ").append(readyGenes.getAbsolutePath()).append(" -dbtype nucl -parse_seqids").append(Tools.nl());
        this.userProps.setProperty(Tools.BLAST_DB, readyGenes.getAbsolutePath());
        FileUtils f = new FileUtils();
        f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.RUN_SCRIPTS_DIR)), "08.0", false);
        System.out.println("Building blastn database. done.");
        this.makeGeneLengthProps(readyGenes);
    }
    
    public File runBlastn() {
        System.out.println("Running blastn.");
        StringBuilder cmd = this.getCommandBuilder();
        cmd.append("blastn -db ").append(this.userProps.getProperty(Tools.BLAST_DB)).append(" -query ");
        File blastResult = new File(this.userProps.getProperty(Tools.BLAST_DIR)+"/blastn.results.txt");
        cmd.append(this.userProps.getProperty(Tools.IRS_FILE)).append(" -out ").append(blastResult.getAbsolutePath());
        cmd.append(" -outfmt 6").append(Tools.nl());       
        FileUtils f = new FileUtils();
        f.command(cmd.toString(), new File(this.userProps.getProperty(Tools.RUN_SCRIPTS_DIR)), "09.0", false);
        this.userProps.setProperty(Tools.BLAST_RESULT, blastResult.getAbsolutePath());
        System.out.println("Running blastn. done.");
        return blastResult;
    }
    
    public void makeGeneLengthProps(File genesReference) {
        Properties geneLengthProps = new Properties();
        try {
            HashMap<String,Integer> map = new HashMap<>();
            BufferedReader r = new BufferedReader(new FileReader(genesReference));
            String line = r.readLine();
            String currentID = "";
            while(line != null){
                if(line.startsWith(">")){
                    currentID = line;
                    if(line.contains(" ")){currentID = line.split(" ")[0];}
                    map.put(currentID, 0);
                }else{
                    int count = map.get(currentID) + line.length();
                    map.put(currentID, count);
                }     
                line = r.readLine();
            }
            r.close();
            Iterator<String> itr = map.keySet().iterator();
            while(itr.hasNext()){
                String nxt = itr.next();
                geneLengthProps.put(nxt.replace(">", "").trim(), String.valueOf(map.get(nxt)));
            }
            String path = this.userProps.getProperty("BLAST_DIR")+"/gene.sizes";
            try (FileOutputStream out = new FileOutputStream(path)) {
                geneLengthProps.store(out, "--- GENE LENGTHS ---");
            } catch (IOException ex) {
                Logger.getLogger(Tools.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Tools.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Tools.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private StringBuilder getCommandBuilder(){
        return new StringBuilder().append("source ~/.bash_profile").append(Tools.nl()).append("conda").append(" activate snfenv").append(Tools.nl());
    }

    private boolean isCondaInstallRequestedByUser(){
        return Boolean.parseBoolean(this.defaultProps.getProperty(Tools.INSTALL_CONDA)) == true;
    }
    
    private boolean isCondaToolsInstallRequestedByUser(){
        return Boolean.parseBoolean(this.defaultProps.getProperty(Tools.INSTALL_CONDA_TOOLS)) == true;
    }

    private boolean isPatmanInstallationRequestedByUser(){
        return Boolean.parseBoolean(this.defaultProps.getProperty(Tools.INSTALL_PATMAN)) == true;
    }
    
    

    public static String nl(){
        return "\n";
    }

    private boolean isDefaultConfigFilePresent(String configPath) {
        File d = new File(configPath);
        if(d.exists() && d.canRead()){
            return true;
        } else {
            System.err.println("Error: properties.config was not found. See user instructions on properties.config.");
            System.exit(1);
            return false;
        }  
    }
    
    private boolean isUserConfigFilePresent(){
        File u = new File(this.getInstallDir()+"/user.config");
        return u.exists() && u.canRead();
    }
    
    private boolean isGziped(File file){
        return file.getName().endsWith(".gz");  
    }
    
}
